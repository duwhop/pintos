#include "threads/thread.h"					#include "threads/thread.h"
#include <debug.h>						#include <debug.h>
#include <stddef.h>						#include <stddef.h>
#include <random.h>						#include <random.h>
#include <stdio.h>						#include <stdio.h>
#include <string.h>						#include <string.h>
#include "threads/flags.h"					#include "threads/flags.h"
#include "threads/interrupt.h"					#include "threads/interrupt.h"
#include "threads/intr-stubs.h"					#include "threads/intr-stubs.h"
#include "threads/palloc.h"					#include "threads/palloc.h"
#include "threads/switch.h"					#include "threads/switch.h"
#include "threads/synch.h"					#include "threads/synch.h"
#include "threads/vaddr.h"					#include "threads/vaddr.h"
							      >	#include "threads/fixed_point.h"
#ifdef USERPROG							#ifdef USERPROG
#include "userprog/process.h"					#include "userprog/process.h"
#endif								#endif

							      >	#define NICE_DEFAULT 0
							      >	#define NICE_MAX 20
							      >	#define NICE_MIN 20
							      >
							      >	#define RECENT_CPU_DEFAULT 0
							      >
							      >	#define LOAD_AVG_DEFAULT 0
							      >
							      >	#define DEPTH_LIMIT 8
							      >
/* Random value for struct thread's `magic' member.		/* Random value for struct thread's `magic' member.
   Used to detect stack overflow.  See the big comment at the	   Used to detect stack overflow.  See the big comment at the
   of thread.h for details. */					   of thread.h for details. */
#define THREAD_MAGIC 0xcd6abf4b					#define THREAD_MAGIC 0xcd6abf4b

/* List of processes in THREAD_READY state, that is, processe	/* List of processes in THREAD_READY state, that is, processe
   that are ready to run but not actually running. */		   that are ready to run but not actually running. */
static struct list ready_list;					static struct list ready_list;

/* List of all processes.  Processes are added to this list	/* List of all processes.  Processes are added to this list
   when they are first scheduled and removed when they exit. 	   when they are first scheduled and removed when they exit. 
static struct list all_list;					static struct list all_list;

/* Idle thread. */						/* Idle thread. */
static struct thread *idle_thread;				static struct thread *idle_thread;

/* Initial thread, the thread running init.c:main(). */		/* Initial thread, the thread running init.c:main(). */
static struct thread *initial_thread;				static struct thread *initial_thread;

/* Lock used by allocate_tid(). */				/* Lock used by allocate_tid(). */
static struct lock tid_lock;					static struct lock tid_lock;

/* Stack frame for kernel_thread(). */				/* Stack frame for kernel_thread(). */
struct kernel_thread_frame 					struct kernel_thread_frame 
  {								  {
    void *eip;                  /* Return address. */		    void *eip;                  /* Return address. */
    thread_func *function;      /* Function to call. */		    thread_func *function;      /* Function to call. */
    void *aux;                  /* Auxiliary data for functio	    void *aux;                  /* Auxiliary data for functio
  };								  };

/* Statistics. */						/* Statistics. */
static long long idle_ticks;    /* # of timer ticks spent idl	static long long idle_ticks;    /* # of timer ticks spent idl
static long long kernel_ticks;  /* # of timer ticks in kernel	static long long kernel_ticks;  /* # of timer ticks in kernel
static long long user_ticks;    /* # of timer ticks in user p	static long long user_ticks;    /* # of timer ticks in user p

/* Scheduling. */						/* Scheduling. */
#define TIME_SLICE 4            /* # of timer ticks to give e	#define TIME_SLICE 4            /* # of timer ticks to give e
static unsigned thread_ticks;   /* # of timer ticks since las	static unsigned thread_ticks;   /* # of timer ticks since las

/* If false (default), use round-robin scheduler.		/* If false (default), use round-robin scheduler.
   If true, use multi-level feedback queue scheduler.		   If true, use multi-level feedback queue scheduler.
   Controlled by kernel command-line option "-o mlfqs". */	   Controlled by kernel command-line option "-o mlfqs". */
bool thread_mlfqs;						bool thread_mlfqs;

							      >	int load_avg;
							      >
static void kernel_thread (thread_func *, void *aux);		static void kernel_thread (thread_func *, void *aux);

static void idle (void *aux UNUSED);				static void idle (void *aux UNUSED);
static struct thread *running_thread (void);			static struct thread *running_thread (void);
static struct thread *next_thread_to_run (void);		static struct thread *next_thread_to_run (void);
static void init_thread (struct thread *, const char *name, i	static void init_thread (struct thread *, const char *name, i
static bool is_thread (struct thread *) UNUSED;			static bool is_thread (struct thread *) UNUSED;
static void *alloc_frame (struct thread *, size_t size);	static void *alloc_frame (struct thread *, size_t size);
static void schedule (void);					static void schedule (void);
void thread_schedule_tail (struct thread *prev);		void thread_schedule_tail (struct thread *prev);
static tid_t allocate_tid (void);				static tid_t allocate_tid (void);

/* Initializes the threading system by transforming the code	/* Initializes the threading system by transforming the code
   that's currently running into a thread.  This can't work i	   that's currently running into a thread.  This can't work i
   general and it is possible in this case only because loade	   general and it is possible in this case only because loade
   was careful to put the bottom of the stack at a page bound	   was careful to put the bottom of the stack at a page bound

   Also initializes the run queue and the tid lock.		   Also initializes the run queue and the tid lock.

   After calling this function, be sure to initialize the pag	   After calling this function, be sure to initialize the pag
   allocator before trying to create any threads with		   allocator before trying to create any threads with
   thread_create().						   thread_create().

   It is not safe to call thread_current() until this functio	   It is not safe to call thread_current() until this functio
   finishes. */							   finishes. */
void								void
thread_init (void) 						thread_init (void) 
{								{
  ASSERT (intr_get_level () == INTR_OFF);			  ASSERT (intr_get_level () == INTR_OFF);

  lock_init (&tid_lock);					  lock_init (&tid_lock);
  list_init (&ready_list);					  list_init (&ready_list);
  list_init (&all_list);					  list_init (&all_list);

  /* Set up a thread structure for the running thread. */	  /* Set up a thread structure for the running thread. */
  initial_thread = running_thread ();				  initial_thread = running_thread ();
  init_thread (initial_thread, "main", PRI_DEFAULT);		  init_thread (initial_thread, "main", PRI_DEFAULT);
  initial_thread->status = THREAD_RUNNING;			  initial_thread->status = THREAD_RUNNING;
  initial_thread->tid = allocate_tid ();			  initial_thread->tid = allocate_tid ();
}								}

/* Starts preemptive thread scheduling by enabling interrupts	/* Starts preemptive thread scheduling by enabling interrupts
   Also creates the idle thread. */				   Also creates the idle thread. */
void								void
thread_start (void) 						thread_start (void) 
{								{
  /* Create the idle thread. */					  /* Create the idle thread. */
  struct semaphore idle_started;				  struct semaphore idle_started;
  sema_init (&idle_started, 0);					  sema_init (&idle_started, 0);
  thread_create ("idle", PRI_MIN, idle, &idle_started);		  thread_create ("idle", PRI_MIN, idle, &idle_started);

							      >	  load_avg = LOAD_AVG_DEFAULT;
							      >
  /* Start preemptive thread scheduling. */			  /* Start preemptive thread scheduling. */
  intr_enable ();						  intr_enable ();

  /* Wait for the idle thread to initialize idle_thread. */	  /* Wait for the idle thread to initialize idle_thread. */
  sema_down (&idle_started);					  sema_down (&idle_started);
}								}

/* Called by the timer interrupt handler at each timer tick.	/* Called by the timer interrupt handler at each timer tick.
   Thus, this function runs in an external interrupt context.	   Thus, this function runs in an external interrupt context.
void								void
thread_tick (void) 						thread_tick (void) 
{								{
  struct thread *t = thread_current ();				  struct thread *t = thread_current ();

  /* Update statistics. */					  /* Update statistics. */
  if (t == idle_thread)						  if (t == idle_thread)
    idle_ticks++;						    idle_ticks++;
#ifdef USERPROG							#ifdef USERPROG
  else if (t->pagedir != NULL)					  else if (t->pagedir != NULL)
    user_ticks++;						    user_ticks++;
#endif								#endif
  else								  else
    kernel_ticks++;						    kernel_ticks++;
							      <
  /* Enforce preemption. */				      <
  if (++thread_ticks >= TIME_SLICE)			      <
    intr_yield_on_return ();				      <
}								}

/* Prints thread statistics. */					/* Prints thread statistics. */
void								void
thread_print_stats (void) 					thread_print_stats (void) 
{								{
  printf ("Thread: %lld idle ticks, %lld kernel ticks, %lld u	  printf ("Thread: %lld idle ticks, %lld kernel ticks, %lld u
          idle_ticks, kernel_ticks, user_ticks);		          idle_ticks, kernel_ticks, user_ticks);
}								}

/* Creates a new kernel thread named NAME with the given init	/* Creates a new kernel thread named NAME with the given init
   PRIORITY, which executes FUNCTION passing AUX as the argum	   PRIORITY, which executes FUNCTION passing AUX as the argum
   and adds it to the ready queue.  Returns the thread identi	   and adds it to the ready queue.  Returns the thread identi
   for the new thread, or TID_ERROR if creation fails.		   for the new thread, or TID_ERROR if creation fails.

   If thread_start() has been called, then the new thread may	   If thread_start() has been called, then the new thread may
   scheduled before thread_create() returns.  It could even e	   scheduled before thread_create() returns.  It could even e
   before thread_create() returns.  Contrariwise, the origina	   before thread_create() returns.  Contrariwise, the origina
   thread may run for any amount of time before the new threa	   thread may run for any amount of time before the new threa
   scheduled.  Use a semaphore or some other form of		   scheduled.  Use a semaphore or some other form of
   synchronization if you need to ensure ordering.		   synchronization if you need to ensure ordering.

   The code provided sets the new thread's `priority' member 	   The code provided sets the new thread's `priority' member 
   PRIORITY, but no actual priority scheduling is implemented	   PRIORITY, but no actual priority scheduling is implemented
   Priority scheduling is the goal of Problem 1-3. */		   Priority scheduling is the goal of Problem 1-3. */
tid_t								tid_t
thread_create (const char *name, int priority,			thread_create (const char *name, int priority,
               thread_func *function, void *aux) 		               thread_func *function, void *aux) 
{								{
  struct thread *t;						  struct thread *t;
  struct kernel_thread_frame *kf;				  struct kernel_thread_frame *kf;
  struct switch_entry_frame *ef;				  struct switch_entry_frame *ef;
  struct switch_threads_frame *sf;				  struct switch_threads_frame *sf;
  tid_t tid;							  tid_t tid;
  enum intr_level old_level;					  enum intr_level old_level;

  ASSERT (function != NULL);					  ASSERT (function != NULL);

  /* Allocate thread. */					  /* Allocate thread. */
  t = palloc_get_page (PAL_ZERO);				  t = palloc_get_page (PAL_ZERO);
  if (t == NULL)						  if (t == NULL)
    return TID_ERROR;						    return TID_ERROR;

  /* Initialize thread. */					  /* Initialize thread. */
  init_thread (t, name, priority);				  init_thread (t, name, priority);
  tid = t->tid = allocate_tid ();				  tid = t->tid = allocate_tid ();

  /* Prepare thread for first run by initializing its stack.	  /* Prepare thread for first run by initializing its stack.
     Do this atomically so intermediate values for the 'stack	     Do this atomically so intermediate values for the 'stack
     member cannot be observed. */				     member cannot be observed. */
  old_level = intr_disable ();					  old_level = intr_disable ();

  /* Stack frame for kernel_thread(). */			  /* Stack frame for kernel_thread(). */
  kf = alloc_frame (t, sizeof *kf);				  kf = alloc_frame (t, sizeof *kf);
  kf->eip = NULL;						  kf->eip = NULL;
  kf->function = function;					  kf->function = function;
  kf->aux = aux;						  kf->aux = aux;

  /* Stack frame for switch_entry(). */				  /* Stack frame for switch_entry(). */
  ef = alloc_frame (t, sizeof *ef);				  ef = alloc_frame (t, sizeof *ef);
  ef->eip = (void (*) (void)) kernel_thread;			  ef->eip = (void (*) (void)) kernel_thread;

  /* Stack frame for switch_threads(). */			  /* Stack frame for switch_threads(). */
  sf = alloc_frame (t, sizeof *sf);				  sf = alloc_frame (t, sizeof *sf);
  sf->eip = switch_entry;					  sf->eip = switch_entry;
  sf->ebp = 0;							  sf->ebp = 0;

  intr_set_level (old_level);					  intr_set_level (old_level);

  /* Add to run queue. */					  /* Add to run queue. */
  thread_unblock (t);						  thread_unblock (t);

							      >	  old_level = intr_disable ();
							      >	  test_max_priority();
							      >	  intr_set_level (old_level);
							      >
  return tid;							  return tid;
}								}

/* Puts the current thread to sleep.  It will not be schedule	/* Puts the current thread to sleep.  It will not be schedule
   again until awoken by thread_unblock().			   again until awoken by thread_unblock().

   This function must be called with interrupts turned off.  	   This function must be called with interrupts turned off.  
   is usually a better idea to use one of the synchronization	   is usually a better idea to use one of the synchronization
   primitives in synch.h. */					   primitives in synch.h. */
void								void
thread_block (void) 						thread_block (void) 
{								{
  ASSERT (!intr_context ());					  ASSERT (!intr_context ());
  ASSERT (intr_get_level () == INTR_OFF);			  ASSERT (intr_get_level () == INTR_OFF);

  thread_current ()->status = THREAD_BLOCKED;			  thread_current ()->status = THREAD_BLOCKED;
  schedule ();							  schedule ();
}								}

/* Transitions a blocked thread T to the ready-to-run state.	/* Transitions a blocked thread T to the ready-to-run state.
   This is an error if T is not blocked.  (Use thread_yield()	   This is an error if T is not blocked.  (Use thread_yield()
   make the running thread ready.)				   make the running thread ready.)

   This function does not preempt the running thread.  This c	   This function does not preempt the running thread.  This c
   be important: if the caller had disabled interrupts itself	   be important: if the caller had disabled interrupts itself
   it may expect that it can atomically unblock a thread and	   it may expect that it can atomically unblock a thread and
   update other data. */					   update other data. */
void								void
thread_unblock (struct thread *t) 				thread_unblock (struct thread *t) 
{								{
  enum intr_level old_level;					  enum intr_level old_level;

  ASSERT (is_thread (t));					  ASSERT (is_thread (t));

  old_level = intr_disable ();					  old_level = intr_disable ();
  ASSERT (t->status == THREAD_BLOCKED);				  ASSERT (t->status == THREAD_BLOCKED);
  list_push_back (&ready_list, &t->elem);		      |	  list_insert_ordered(&ready_list, &t->elem,
							      >			      (list_less_func *) &cmp_priority,
							      >			      NULL);
  t->status = THREAD_READY;					  t->status = THREAD_READY;
  intr_set_level (old_level);					  intr_set_level (old_level);
}								}

/* Returns the name of the running thread. */			/* Returns the name of the running thread. */
const char *							const char *
thread_name (void) 						thread_name (void) 
{								{
  return thread_current ()->name;				  return thread_current ()->name;
}								}

/* Returns the running thread.					/* Returns the running thread.
   This is running_thread() plus a couple of sanity checks.	   This is running_thread() plus a couple of sanity checks.
   See the big comment at the top of thread.h for details. */	   See the big comment at the top of thread.h for details. */
struct thread *							struct thread *
thread_current (void) 						thread_current (void) 
{								{
  struct thread *t = running_thread ();				  struct thread *t = running_thread ();
  								  
  /* Make sure T is really a thread.				  /* Make sure T is really a thread.
     If either of these assertions fire, then your thread may	     If either of these assertions fire, then your thread may
     have overflowed its stack.  Each thread has less than 4 	     have overflowed its stack.  Each thread has less than 4 
     of stack, so a few big automatic arrays or moderate	     of stack, so a few big automatic arrays or moderate
     recursion can cause stack overflow. */			     recursion can cause stack overflow. */
  ASSERT (is_thread (t));					  ASSERT (is_thread (t));
  ASSERT (t->status == THREAD_RUNNING);				  ASSERT (t->status == THREAD_RUNNING);

  return t;							  return t;
}								}

/* Returns the running thread's tid. */				/* Returns the running thread's tid. */
tid_t								tid_t
thread_tid (void) 						thread_tid (void) 
{								{
  return thread_current ()->tid;				  return thread_current ()->tid;
}								}

/* Deschedules the current thread and destroys it.  Never	/* Deschedules the current thread and destroys it.  Never
   returns to the caller. */					   returns to the caller. */
void								void
thread_exit (void) 						thread_exit (void) 
{								{
  ASSERT (!intr_context ());					  ASSERT (!intr_context ());

#ifdef USERPROG							#ifdef USERPROG
  process_exit ();						  process_exit ();
#endif								#endif

  /* Remove thread from all threads list, set our status to d	  /* Remove thread from all threads list, set our status to d
     and schedule another process.  That process will destroy	     and schedule another process.  That process will destroy
     when it calls thread_schedule_tail(). */			     when it calls thread_schedule_tail(). */
  intr_disable ();						  intr_disable ();
  list_remove (&thread_current()->allelem);			  list_remove (&thread_current()->allelem);
  thread_current ()->status = THREAD_DYING;			  thread_current ()->status = THREAD_DYING;
  schedule ();							  schedule ();
  NOT_REACHED ();						  NOT_REACHED ();
}								}

/* Yields the CPU.  The current thread is not put to sleep an	/* Yields the CPU.  The current thread is not put to sleep an
   may be scheduled again immediately at the scheduler's whim	   may be scheduled again immediately at the scheduler's whim
void								void
thread_yield (void) 						thread_yield (void) 
{								{
  struct thread *cur = thread_current ();			  struct thread *cur = thread_current ();
  enum intr_level old_level;					  enum intr_level old_level;
  								  
  ASSERT (!intr_context ());					  ASSERT (!intr_context ());

  old_level = intr_disable ();					  old_level = intr_disable ();
  if (cur != idle_thread) 				      |	  if (cur != idle_thread)
    list_push_back (&ready_list, &cur->elem);		      |	    {
							      >	      list_insert_ordered(&ready_list, &cur->elem,
							      >				  (list_less_func *) &cmp_priority,
							      >				  NULL);
							      >	    }
  cur->status = THREAD_READY;					  cur->status = THREAD_READY;
  schedule ();							  schedule ();
  intr_set_level (old_level);					  intr_set_level (old_level);
}								}

/* Invoke function 'func' on all threads, passing along 'aux'	/* Invoke function 'func' on all threads, passing along 'aux'
   This function must be called with interrupts off. */		   This function must be called with interrupts off. */
void								void
thread_foreach (thread_action_func *func, void *aux)		thread_foreach (thread_action_func *func, void *aux)
{								{
  struct list_elem *e;						  struct list_elem *e;

  ASSERT (intr_get_level () == INTR_OFF);			  ASSERT (intr_get_level () == INTR_OFF);

  for (e = list_begin (&all_list); e != list_end (&all_list);	  for (e = list_begin (&all_list); e != list_end (&all_list);
       e = list_next (e))					       e = list_next (e))
    {								    {
      struct thread *t = list_entry (e, struct thread, allele	      struct thread *t = list_entry (e, struct thread, allele
      func (t, aux);						      func (t, aux);
    }								    }
}								}

/* Sets the current thread's priority to NEW_PRIORITY. */	/* Sets the current thread's priority to NEW_PRIORITY. */
void								void
thread_set_priority (int new_priority) 				thread_set_priority (int new_priority) 
{								{
  thread_current ()->priority = new_priority;		      |	  if (thread_mlfqs)
							      >	    {
							      >	      return;
							      >	    }
							      >	  enum intr_level old_level = intr_disable ();
							      >	  int old_priority = thread_current()->priority;
							      >	  thread_current ()->init_priority = new_priority;
							      >	  refresh_priority();
							      >	  // If new priority is greater, donate it
							      >	  if (old_priority < thread_current()->priority)
							      >	    {
							      >	      donate_priority();
							      >	    }
							      >	  // If new priority is less, test if the processor should be
							      >	  if (old_priority > thread_current()->priority)
							      >	    {
							      >	      test_max_priority();
							      >	    }
							      >	  intr_set_level (old_level);
}								}

/* Returns the current thread's priority. */			/* Returns the current thread's priority. */
int								int
thread_get_priority (void) 					thread_get_priority (void) 
{								{
  return thread_current ()->priority;			      |	  enum intr_level old_level = intr_disable ();
							      >	  int tmp = thread_current()->priority;
							      >	  intr_set_level (old_level);
							      >	  return tmp;
}								}

/* Sets the current thread's nice value to NICE. */		/* Sets the current thread's nice value to NICE. */
void								void
thread_set_nice (int nice UNUSED) 				thread_set_nice (int nice UNUSED) 
{								{
  /* Not yet implemented. */				      |	  enum intr_level old_level = intr_disable ();
							      >	  thread_current()->nice = nice;
							      >	  mlfqs_priority(thread_current());
							      >	  test_max_priority();
							      >	  intr_set_level (old_level);
}								}

/* Returns the current thread's nice value. */			/* Returns the current thread's nice value. */
int								int
thread_get_nice (void) 						thread_get_nice (void) 
{								{
  /* Not yet implemented. */				      |	  enum intr_level old_level = intr_disable ();
  return 0;						      |	  int tmp = thread_current()->nice;
							      >	  intr_set_level (old_level);
							      >	  return tmp;
}								}

/* Returns 100 times the system load average. */		/* Returns 100 times the system load average. */
int								int
thread_get_load_avg (void) 					thread_get_load_avg (void) 
{								{
  /* Not yet implemented. */				      |	  enum intr_level old_level = intr_disable ();
  return 0;						      |	  int tmp = fp_to_int_round( mult_mixed(load_avg, 100) );
							      >	  intr_set_level (old_level);
							      >	  return tmp;
}								}

/* Returns 100 times the current thread's recent_cpu value. *	/* Returns 100 times the current thread's recent_cpu value. *
int								int
thread_get_recent_cpu (void) 					thread_get_recent_cpu (void) 
{								{
  /* Not yet implemented. */				      |	  enum intr_level old_level = intr_disable ();
  return 0;						      |	  int tmp = fp_to_int_round( mult_mixed(thread_current()->rec
							      >	  intr_set_level (old_level);
							      >	  return tmp;
}								}
								
/* Idle thread.  Executes when no other thread is ready to ru	/* Idle thread.  Executes when no other thread is ready to ru

   The idle thread is initially put on the ready list by	   The idle thread is initially put on the ready list by
   thread_start().  It will be scheduled once initially, at w	   thread_start().  It will be scheduled once initially, at w
   point it initializes idle_thread, "up"s the semaphore pass	   point it initializes idle_thread, "up"s the semaphore pass
   to it to enable thread_start() to continue, and immediatel	   to it to enable thread_start() to continue, and immediatel
   blocks.  After that, the idle thread never appears in the	   blocks.  After that, the idle thread never appears in the
   ready list.  It is returned by next_thread_to_run() as a	   ready list.  It is returned by next_thread_to_run() as a
   special case when the ready list is empty. */		   special case when the ready list is empty. */
static void							static void
idle (void *idle_started_ UNUSED) 				idle (void *idle_started_ UNUSED) 
{								{
  struct semaphore *idle_started = idle_started_;		  struct semaphore *idle_started = idle_started_;
  idle_thread = thread_current ();				  idle_thread = thread_current ();
  sema_up (idle_started);					  sema_up (idle_started);

  for (;;) 							  for (;;) 
    {								    {
      /* Let someone else run. */				      /* Let someone else run. */
      intr_disable ();						      intr_disable ();
      thread_block ();						      thread_block ();

      /* Re-enable interrupts and wait for the next one.	      /* Re-enable interrupts and wait for the next one.

         The `sti' instruction disables interrupts until the	         The `sti' instruction disables interrupts until the
         completion of the next instruction, so these two	         completion of the next instruction, so these two
         instructions are executed atomically.  This atomicit	         instructions are executed atomically.  This atomicit
         important; otherwise, an interrupt could be handled	         important; otherwise, an interrupt could be handled
         between re-enabling interrupts and waiting for the n	         between re-enabling interrupts and waiting for the n
         one to occur, wasting as much as one clock tick wort	         one to occur, wasting as much as one clock tick wort
         time.							         time.

         See [IA32-v2a] "HLT", [IA32-v2b] "STI", and [IA32-v3	         See [IA32-v2a] "HLT", [IA32-v2b] "STI", and [IA32-v3
         7.11.1 "HLT Instruction". */				         7.11.1 "HLT Instruction". */
      asm volatile ("sti; hlt" : : : "memory");			      asm volatile ("sti; hlt" : : : "memory");
    }								    }
}								}

/* Function used as the basis for a kernel thread. */		/* Function used as the basis for a kernel thread. */
static void							static void
kernel_thread (thread_func *function, void *aux) 		kernel_thread (thread_func *function, void *aux) 
{								{
  ASSERT (function != NULL);					  ASSERT (function != NULL);

  intr_enable ();       /* The scheduler runs with interrupts	  intr_enable ();       /* The scheduler runs with interrupts
  function (aux);       /* Execute the thread function. */	  function (aux);       /* Execute the thread function. */
  thread_exit ();       /* If function() returns, kill the th	  thread_exit ();       /* If function() returns, kill the th
}								}
								
/* Returns the running thread. */				/* Returns the running thread. */
struct thread *							struct thread *
running_thread (void) 						running_thread (void) 
{								{
  uint32_t *esp;						  uint32_t *esp;

  /* Copy the CPU's stack pointer into `esp', and then round 	  /* Copy the CPU's stack pointer into `esp', and then round 
     down to the start of a page.  Because `struct thread' is	     down to the start of a page.  Because `struct thread' is
     always at the beginning of a page and the stack pointer 	     always at the beginning of a page and the stack pointer 
     somewhere in the middle, this locates the curent thread.	     somewhere in the middle, this locates the curent thread.
  asm ("mov %%esp, %0" : "=g" (esp));				  asm ("mov %%esp, %0" : "=g" (esp));
  return pg_round_down (esp);					  return pg_round_down (esp);
}								}

/* Returns true if T appears to point to a valid thread. */	/* Returns true if T appears to point to a valid thread. */
static bool							static bool
is_thread (struct thread *t)					is_thread (struct thread *t)
{								{
  return t != NULL && t->magic == THREAD_MAGIC;			  return t != NULL && t->magic == THREAD_MAGIC;
}								}

/* Does basic initialization of T as a blocked thread named	/* Does basic initialization of T as a blocked thread named
   NAME. */							   NAME. */
static void							static void
init_thread (struct thread *t, const char *name, int priority	init_thread (struct thread *t, const char *name, int priority
{								{
  ASSERT (t != NULL);						  ASSERT (t != NULL);
  ASSERT (PRI_MIN <= priority && priority <= PRI_MAX);		  ASSERT (PRI_MIN <= priority && priority <= PRI_MAX);
  ASSERT (name != NULL);					  ASSERT (name != NULL);

  memset (t, 0, sizeof *t);					  memset (t, 0, sizeof *t);
  t->status = THREAD_BLOCKED;					  t->status = THREAD_BLOCKED;
  strlcpy (t->name, name, sizeof t->name);			  strlcpy (t->name, name, sizeof t->name);
  t->stack = (uint8_t *) t + PGSIZE;				  t->stack = (uint8_t *) t + PGSIZE;
  t->priority = priority;					  t->priority = priority;
  t->magic = THREAD_MAGIC;					  t->magic = THREAD_MAGIC;
  list_push_back (&all_list, &t->allelem);			  list_push_back (&all_list, &t->allelem);
							      >
							      >	  // Added initializations for priority donation
							      >	  t->init_priority = priority;
							      >	  t->wait_on_lock = NULL;
							      >	  list_init(&t->donations);
							      >
							      >	  // Added for BSD scheduler
							      >	  t->nice = NICE_DEFAULT;
							      >	  t->recent_cpu = RECENT_CPU_DEFAULT;
}								}

/* Allocates a SIZE-byte frame at the top of thread T's stack	/* Allocates a SIZE-byte frame at the top of thread T's stack
   returns a pointer to the frame's base. */			   returns a pointer to the frame's base. */
static void *							static void *
alloc_frame (struct thread *t, size_t size) 			alloc_frame (struct thread *t, size_t size) 
{								{
  /* Stack data is always allocated in word-size units. */	  /* Stack data is always allocated in word-size units. */
  ASSERT (is_thread (t));					  ASSERT (is_thread (t));
  ASSERT (size % sizeof (uint32_t) == 0);			  ASSERT (size % sizeof (uint32_t) == 0);

  t->stack -= size;						  t->stack -= size;
  return t->stack;						  return t->stack;
}								}

/* Chooses and returns the next thread to be scheduled.  Shou	/* Chooses and returns the next thread to be scheduled.  Shou
   return a thread from the run queue, unless the run queue i	   return a thread from the run queue, unless the run queue i
   empty.  (If the running thread can continue running, then 	   empty.  (If the running thread can continue running, then 
   will be in the run queue.)  If the run queue is empty, ret	   will be in the run queue.)  If the run queue is empty, ret
   idle_thread. */						   idle_thread. */
static struct thread *						static struct thread *
next_thread_to_run (void) 					next_thread_to_run (void) 
{								{
  if (list_empty (&ready_list))					  if (list_empty (&ready_list))
    return idle_thread;						    return idle_thread;
  else								  else
    return list_entry (list_pop_front (&ready_list), struct t	    return list_entry (list_pop_front (&ready_list), struct t
}								}

/* Completes a thread switch by activating the new thread's p	/* Completes a thread switch by activating the new thread's p
   tables, and, if the previous thread is dying, destroying i	   tables, and, if the previous thread is dying, destroying i

   At this function's invocation, we just switched from threa	   At this function's invocation, we just switched from threa
   PREV, the new thread is already running, and interrupts ar	   PREV, the new thread is already running, and interrupts ar
   still disabled.  This function is normally invoked by	   still disabled.  This function is normally invoked by
   thread_schedule() as its final action before returning, bu	   thread_schedule() as its final action before returning, bu
   the first time a thread is scheduled it is called by		   the first time a thread is scheduled it is called by
   switch_entry() (see switch.S).				   switch_entry() (see switch.S).

   It's not safe to call printf() until the thread switch is	   It's not safe to call printf() until the thread switch is
   complete.  In practice that means that printf()s should be	   complete.  In practice that means that printf()s should be
   added at the end of the function.				   added at the end of the function.

   After this function and its caller returns, the thread swi	   After this function and its caller returns, the thread swi
   is complete. */						   is complete. */
void								void
thread_schedule_tail (struct thread *prev)			thread_schedule_tail (struct thread *prev)
{								{
  struct thread *cur = running_thread ();			  struct thread *cur = running_thread ();
  								  
  ASSERT (intr_get_level () == INTR_OFF);			  ASSERT (intr_get_level () == INTR_OFF);

  /* Mark us as running. */					  /* Mark us as running. */
  cur->status = THREAD_RUNNING;					  cur->status = THREAD_RUNNING;

  /* Start new time slice. */					  /* Start new time slice. */
  thread_ticks = 0;						  thread_ticks = 0;

#ifdef USERPROG							#ifdef USERPROG
  /* Activate the new address space. */				  /* Activate the new address space. */
  process_activate ();						  process_activate ();
#endif								#endif

  /* If the thread we switched from is dying, destroy its str	  /* If the thread we switched from is dying, destroy its str
     thread.  This must happen late so that thread_exit() doe	     thread.  This must happen late so that thread_exit() doe
     pull out the rug under itself.  (We don't free		     pull out the rug under itself.  (We don't free
     initial_thread because its memory was not obtained via	     initial_thread because its memory was not obtained via
     palloc().) */						     palloc().) */
  if (prev != NULL && prev->status == THREAD_DYING && prev !=	  if (prev != NULL && prev->status == THREAD_DYING && prev !=
    {								    {
      ASSERT (prev != cur);					      ASSERT (prev != cur);
      palloc_free_page (prev);					      palloc_free_page (prev);
    }								    }
}								}

/* Schedules a new process.  At entry, interrupts must be off	/* Schedules a new process.  At entry, interrupts must be off
   the running process's state must have been changed from	   the running process's state must have been changed from
   running to some other state.  This function finds another	   running to some other state.  This function finds another
   thread to run and switches to it.				   thread to run and switches to it.

   It's not safe to call printf() until thread_schedule_tail(	   It's not safe to call printf() until thread_schedule_tail(
   has completed. */						   has completed. */
static void							static void
schedule (void) 						schedule (void) 
{								{
  struct thread *cur = running_thread ();			  struct thread *cur = running_thread ();
  struct thread *next = next_thread_to_run ();			  struct thread *next = next_thread_to_run ();
  struct thread *prev = NULL;					  struct thread *prev = NULL;

  ASSERT (intr_get_level () == INTR_OFF);			  ASSERT (intr_get_level () == INTR_OFF);
  ASSERT (cur->status != THREAD_RUNNING);			  ASSERT (cur->status != THREAD_RUNNING);
  ASSERT (is_thread (next));					  ASSERT (is_thread (next));

  if (cur != next)						  if (cur != next)
    prev = switch_threads (cur, next);				    prev = switch_threads (cur, next);
  thread_schedule_tail (prev);					  thread_schedule_tail (prev);
}								}

/* Returns a tid to use for a new thread. */			/* Returns a tid to use for a new thread. */
static tid_t							static tid_t
allocate_tid (void) 						allocate_tid (void) 
{								{
  static tid_t next_tid = 1;					  static tid_t next_tid = 1;
  tid_t tid;							  tid_t tid;

  lock_acquire (&tid_lock);					  lock_acquire (&tid_lock);
  tid = next_tid++;						  tid = next_tid++;
  lock_release (&tid_lock);					  lock_release (&tid_lock);

  return tid;							  return tid;
}								}
								
/* Offset of `stack' member within `struct thread'.		/* Offset of `stack' member within `struct thread'.
   Used by switch.S, which can't figure it out on its own. */	   Used by switch.S, which can't figure it out on its own. */
uint32_t thread_stack_ofs = offsetof (struct thread, stack);	uint32_t thread_stack_ofs = offsetof (struct thread, stack);
							      >
							      >	bool cmp_ticks (const struct list_elem *a,
							      >			const struct list_elem *b,
							      >			void *aux UNUSED)
							      >	{
							      >	  struct thread *ta = list_entry(a, struct thread, elem);
							      >	  struct thread *tb = list_entry(b, struct thread, elem);
							      >	  if (ta->ticks < tb->ticks)
							      >	    {
							      >	      return true;
							      >	    }
							      >	  return false;
							      >	}
							      >
							      >	bool cmp_priority (const struct list_elem *a,
							      >			   const struct list_elem *b,
							      >			   void *aux UNUSED)
							      >	{
							      >	  struct thread *ta = list_entry(a, struct thread, elem);
							      >	  struct thread *tb = list_entry(b, struct thread, elem);
							      >	  if (ta->priority > tb->priority)
							      >	    {
							      >	      return true;
							      >	    }
							      >	  return false;
							      >	}
							      >
							      >	void test_max_priority (void)
							      >	{
							      >	  if ( list_empty(&ready_list) )
							      >	    {
							      >	      return;
							      >	    }
							      >	  struct thread *t = list_entry(list_front(&ready_list),
							      >					struct thread, elem);
							      >	  if (intr_context())
							      >	    {
							      >	      thread_ticks++;
							      >	      if ( thread_current()->priority < t->priority ||
							      >		   (thread_ticks >= TIME_SLICE &&
							      >		    thread_current()->priority == t->priority) )
							      >		{
							      >		  intr_yield_on_return();
							      >		}
							      >	      return;
							      >	    }
							      >	  if (thread_current()->priority < t->priority)
							      >	    {
							      >	      thread_yield();
							      >	    }
							      >	}
							      >
							      >	void mlfqs_priority (struct thread *t)
							      >	{
							      >	  if (t == idle_thread)
							      >	    {
							      >	      return;
							      >	    }
							      >	  int term1 = int_to_fp(PRI_MAX);
							      >	  int term2 = div_mixed( t->recent_cpu, 4);
							      >	  int term3 = 2*t->nice;
							      >	  term1 = sub_fp(term1, term2);
							      >	  term1 = sub_mixed(term1, term3);
							      >	  t->priority = fp_to_int(term1);
							      >	  if (t->priority < PRI_MIN)
							      >	    {
							      >	      t->priority = PRI_MIN;
							      >	    }
							      >	  if (t->priority > PRI_MAX)
							      >	    {
							      >	      t->priority = PRI_MAX;
							      >	    }
							      >	}
							      >
							      >	void mlfqs_recent_cpu (struct thread *t)
							      >	{
							      >	  if (t == idle_thread)
							      >	    {
							      >	      return;
							      >	    }
							      >	  int term1 = mult_mixed(load_avg, 2);
							      >	  term1 = div_fp(term1, add_mixed(term1, 1) );
							      >	  term1 = mult_fp(term1, t->recent_cpu);
							      >	  t->recent_cpu = add_mixed(term1, t->nice);
							      >	}
							      >
							      >	void mlfqs_load_avg (void)
							      >	{
							      >	  int term2 = list_size(&ready_list);
							      >	  if (thread_current() != idle_thread)
							      >	    {
							      >	      term2++;
							      >	    }
							      >	  int term1 = div_mixed(int_to_fp(59), 60);
							      >	  term1 = mult_fp(term1, load_avg);
							      >	  term2 = div_mixed(int_to_fp(term2), 60);
							      >	  load_avg = add_fp(term1, term2);
							      >	  ASSERT (load_avg >= 0)
							      >	}
							      >
							      >	void mlfqs_increment (void)
							      >	{
							      >	  if (thread_current() == idle_thread)
							      >	    {
							      >	      return;
							      >	    }
							      >	  thread_current()->recent_cpu = add_mixed(
							      >					   thread_current()->recent_c
							      >	}
							      >
							      >	void mlfqs_recalc (void)
							      >	{
							      >	  struct list_elem *e;
							      >	  for (e = list_begin(&all_list); e != list_end(&all_list);
							      >	       e = list_next(e))
							      >	    {
							      >	      struct thread *t = list_entry(e, struct thread, allelem
							      >	      mlfqs_recent_cpu(t);
							      >	      mlfqs_priority(t);
							      >	    }
							      >	}
							      >
							      >	void donate_priority (void)
							      >	{
							      >	  int depth = 0;
							      >	  struct thread *t = thread_current();
							      >	  struct lock *l = t->wait_on_lock;
							      >	  while (l && depth < DEPTH_LIMIT)
							      >	    {
							      >	      depth++;
							      >	      // If lock is not being held, return
							      >	      if (!l->holder)
							      >		{
							      >		  return;
							      >		}
							      >	      if (l->holder->priority >= t->priority)
							      >		{
							      >		  return;
							      >		}
							      >	      l->holder->priority = t->priority;
							      >	      t = l->holder;
							      >	      l = t->wait_on_lock;
							      >	    }
							      >	}
							      >
							      >	void remove_with_lock(struct lock *lock)
							      >	{
							      >	  struct list_elem *e = list_begin(&thread_current()->donatio
							      >	  struct list_elem *next;
							      >	  while (e != list_end(&thread_current()->donations))
							      >	    {
							      >	      struct thread *t = list_entry(e, struct thread, donatio
							      >	      next = list_next(e);
							      >	      if (t->wait_on_lock == lock)
							      >		{
							      >		  list_remove(e);
							      >		}
							      >	      e = next;
							      >	    }
							      >	}
							      >
							      >	void refresh_priority (void)
							      >	{
							      >	  struct thread *t = thread_current();
							      >	  t->priority = t->init_priority;
							      >	  if (list_empty(&t->donations))
							      >	    {
							      >	      return;
							      >	    }
							      >	  struct thread *s = list_entry(list_front(&t->donations),
							      >					struct thread, donation_elem)
							      >	  if (s->priority > t->priority)
							      >	    {
							      >	      t->priority = s->priority;
							      >	    }
							      >	}
